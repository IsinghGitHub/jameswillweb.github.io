<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simple Primate</title>
    <description>Simple Primate is the online home of James Williamson, lynda.com author, speaker and occasional web developer.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 04 Aug 2017 17:01:19 -0400</pubDate>
    <lastBuildDate>Fri, 04 Aug 2017 17:01:19 -0400</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Git rebase to the rescue</title>
        <description>&lt;p&gt;The other day I found myself having serious trouble publishing a new post to my blog. I was able to solve the problem through the use of Git rebase and I thought I would share my experience in case somebody else happens to go through the same thing.&lt;/p&gt;

&lt;h3&gt;The problem&lt;/h3&gt;

&lt;p&gt;I host this blog through &lt;a href=&quot;https://pages.github.com/&quot; title=&quot;Github Pages&quot;&gt;Github Pages&lt;/a&gt; because it’s quick, easy, and free. Although I love the ease-of-use it provides me it is not without its downsides. Recently I recorded a quick screen cast for a friend of mine who needed help solving a problem. I created a unique page on my site to host the video, tested it locally and committed the changes. I’m not the type to read a site’s &lt;a href=&quot;https://help.github.com/articles/github-terms-of-service/&quot; title=&quot;Github Pages terms of service&quot;&gt;terms of service&lt;/a&gt; so I had no idea that Github Pages has a file site limitation of 100mb. The upload was rejected and I had to find an alternate means of showing the video to my friend. No big deal, I removed the video and related files from my local directory and didn’t think much more about it.&lt;/p&gt;

&lt;p&gt;It only became an issue later when I wrote another blog post. I committed the changes, which also included removing the failed video files from the previous commit. At this point my remote repo was now two commits behind my local repository. When I attempted to push my latest commit it pushed both of them. So even though the large video file wasn’t physically present it was still blocking my ability to publish blog posts. Version control’s gotta version, after all. Unless I could figure out a way to get rid of the offending commit I was stuck.&lt;/p&gt;

&lt;h3&gt;The solution&lt;/h3&gt;

&lt;p&gt;You can probably tell by now that I am not a Git expert, in fact I would categorize myself as a casual user at best. My initial response was to do a force push. When that didn’t work I tried removing the file directly using &lt;code class=&quot;highlighter-rouge&quot;&gt;git rm --cached filename&lt;/code&gt;. It was equally unsuccessful. I really didn’t want to have to do something like flattening all my commits or creating a new branch, and I just knew that there must be a way to remove individual commits. Although I’ve never needed to use it before I remember reading about Git rebase and thought that it might offer me a solution.&lt;/p&gt;

&lt;h4&gt;Git rebase&lt;/h4&gt;

&lt;p&gt;You can think of rebase as Git merge on steroids. Its main focus is on altering commit histories and solving complex merge issues that usually stem from team-based workflows. I’m not even going to pretend to act like I know how it works. If you want to learn more about it I highly suggest &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Branching-Rebasing&quot; title=&quot;article on Git rebase&quot;&gt;this article&lt;/a&gt; from the book &lt;a href=&quot;https://git-scm.com/book/en/v2&quot; title=&quot;online version of the book Pro Git&quot;&gt;Pro Git&lt;/a&gt; by Scott Chacon.&lt;/p&gt;

&lt;h4&gt;Removing individual commits with rebase&lt;/h4&gt;

&lt;p&gt;Using the &lt;strong&gt;interactive flag&lt;/strong&gt; you can use rebase to display and edit individual commits, which is exactly what I needed to do. In my terminal window I typed the command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git rebase -i HEAD~2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This tells Git that you want to interact with a number of previous commits. Since I used the number 2 I only wanted to display and edit the previous two commits.&lt;/p&gt;

&lt;p&gt;Because I wasn’t smart enough to change my default text editor Git then opened up the following message in Vim.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pick c58c9d3 add video
pick a4945a1 post update

&lt;span class=&quot;c&quot;&gt;# Rebase bc4a787..a4945a1 onto bc4a787 (2 commands)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Commands:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# p, pick = use commit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# r, reword = use commit, but edit the commit message&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# e, edit = use commit, but stop for amending&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# s, squash = use commit, but meld into previous commit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# f, fixup = like &quot;squash&quot;, but discard this commit's log message&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# x, exec = run command (the rest of the line) using shell&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# d, drop = remove commit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# These lines can be re-ordered; they are executed from top to bottom.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# If you remove a line here THAT COMMIT WILL BE LOST.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# However, if you remove everything, the rebase will be aborted.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note that empty commits are commented out&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I used the &lt;strong&gt;drop&lt;/strong&gt; command to remove the first commit, saved the file, and exited Vim. At this point I thought I was home free but I had one more problem to deal with. I had forgotten to add my directory structure files to my &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file and Git warned of a conflict between my local &lt;code class=&quot;highlighter-rouge&quot;&gt;.DS_Store&lt;/code&gt; files. Since they are binary files it couldn’t continue with the rebase until I resolved the conflict. I committed the most recent file and completed the rebase by telling Git to continue.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git rebase --continue&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After that it was a simple matter of making sure my local repo was current and then pushing the changes to my Github Pages repo. Although I didn’t have to in my case, I read in the Github Pages documentation that you might have to do a force push after a rebase, so be on the lookout for that if you face a similar situation.&lt;/p&gt;

&lt;p&gt;Hopefully you won’t ever find yourself in a jam like that, but if you do keep in mind that Git rebase can save a lot of time and trouble if you ever need to make edits to your commit history.&lt;/p&gt;

</description>
        <pubDate>Thu, 13 Jul 2017 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/rebase</link>
        <guid isPermaLink="true">http://localhost:4000/blog/rebase</guid>
        
        <category>git</category>
        
        <category>github pages</category>
        
        <category>web design</category>
        
        
      </item>
    
      <item>
        <title>What I've learned about motor impairment</title>
        <description>&lt;p&gt;Accessibility is (thankfully) receiving a fair amount of attention in web development circles these days. As designers and developers we should all be seeking to create experiences that are as inclusive as possible. With that in mind I’d like to talk about designing for motor impairments, an aspect of accessibility that I think is often overlooked.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.cdc.gov/nchs/fastats/disability.htm&quot; title=&quot;Stats on motor disabilities among the US population&quot;&gt;National Center for Health Statistics&lt;/a&gt; reported in 2015 that 32% of Americans aged 18 and over have some type of motor impairment. That number may seem quite large, but it covers a wide range of disabilities and limitations. Often when we discuss motor function related disabilities we limit the discussion to those with severe impairments such as paralysis or cerebral palsy. &lt;strong&gt;The reality is that almost any decreased motor function control can negatively impact someone’s ability to browse the web or use your application&lt;/strong&gt;. In fact, the likelihood that you will face some type of motor impairment in your lifetime is quite high. Whether it’s temporary like a broken wrist, or a permanent loss due to things like illness or the natural process of aging it’s an issue that almost everyone will have to deal with at some point. So naturally it makes sense to design your projects with these limitations in mind.&lt;/p&gt;

&lt;p&gt;My own experience with motor impairment began in 2012 when I first noticed a weakness in my right hand. I chalked it up to all day coding sessions and perhaps a mild case of carpal tunnel. Wearing a brace and resting the hand didn’t help however, and by 2013 I was seeing actual muscle wasting in my hand. This led to several months of extensive testing and an eventual diagnosis of ALS. Due to the nature of ALS my control over most motor functions has experienced a gradual but steady decline. This means that as my motor functionality has lessened I’ve had to adapt to remain productive. Currently I’ve lost almost all function in my right hand and my left hand is significantly affected. My fine motor control is almost completely gone with only my index finger and thumb on my left hand still relatively active. Adapting to these diminished capabilities has taught me a lot about how websites and apps can better address the needs of those with a wide range of motor impairments. I’d like to share what I’ve learned.&lt;/p&gt;

&lt;h3&gt;Don’t assume keyboard access is all you need&lt;/h3&gt;

&lt;p&gt;Most of the articles I’ve read about accessibility and motor impairments list the types of assistive technology designed to help those individuals access the web and then advise you to make your site keyboard accessible in order to accommodate them. Making your site keyboard accessible is a &lt;a href=&quot;https://www.usertesting.com/blog/2014/10/08/why-keyboard-usability-is-more-important-than-you-think/&quot; title=&quot;reasons why keyboard accessibility is important&quot;&gt;good idea for multiple reasons&lt;/a&gt;, but I have found that as my impairment has progressed I use my keyboard less and less frequently. My primary means of interacting with the web is by using my mouse, over which I still have a fair amount of control, and through voice dictation software. Voice dictation is, shall we say, less than perfect. If you ever want to assuage your fears of a world dominated by AI simply spend a few hours trying to dictate an email. Filling out forms and typing any kind of input that has precise values and special characters can be frustrating and time consuming. &lt;em&gt;When designing interactions that require input from the user try to keep in mind that not everyone has total control over their keyboard and limit unnecessary inputs&lt;/em&gt;. Forms especially should be designed with these types of users in mind and should assist in filling out the form when possible. Here are some things that I find extremely helpful:&lt;/p&gt;

&lt;h4&gt;Auto complete/Autofill&lt;/h4&gt;

&lt;p&gt;There are times when I don’t feel like launching my voice dictation software to do a simple search or fill out a small form. In those cases I typically do the one finger hunt and peck on my keyboard or use my mouse to interact with an on-screen keyboard. Auto completion can save me a tremendous amount of time and frustration in those instances. The good news is there is a fair amount of open source auto completion libraries that are fairly easy to integrate into your sites. Twitter’s &lt;a href=&quot;http://twitter.github.io/typeahead.js/&quot; title=&quot;twitter's open source auto completion library&quot;&gt;typeahead.js&lt;/a&gt; is a popular choice and offers a fairly robust solution.&lt;/p&gt;

&lt;p&gt;Having forms that auto fill standard information is also incredibly helpful to those of us with motor impairments. There are security concerns and usage patterns that you must take into account when deciding whether or not to enable auto fill but in my opinion the benefits outweigh the concerns in most cases. If you are not familiar with it check out this &lt;a href=&quot;https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill&quot; title=&quot;Google developers article on auto fill&quot;&gt;Google Developers introductory article&lt;/a&gt; on the subject and then read this &lt;a href=&quot;https://cloudfour.com/thinks/autofill-what-web-devs-should-know-but-dont/&quot; title=&quot;cloudfour article on the usage of auto fill for forms&quot;&gt;fantastic article by Jason Grigsby&lt;/a&gt; that goes into more detail and explains usage patterns.&lt;/p&gt;

&lt;h4&gt;Show me my password&lt;/h4&gt;

&lt;p&gt;Perhaps the most frustrating input issue for me is not being able to see my password as I type. Whether I’m using voice dictation or a single finger on my keyboard precise input is extremely difficult. This difficulty is increased when you introduce special characters and many of the requirements found in passwords. Not being able to see what I’ve input equates to a high degree of failure when entering passwords. Yes, password managers do help and I’m not above copying and pasting into the input field but I really shouldn’t have to. &lt;a href=&quot;http://daverupert.com/&quot; title=&quot;Dave Rupert, the man, the myth, the legend&quot;&gt;Dave Rupert&lt;/a&gt; recently tweeted this animation of the password field in Microsoft Edge that has the option baked into it. Until this pattern becomes standard in every browser it’s up to you to make sure users have the option of displaying their password.&lt;/p&gt;

&lt;figure&gt;
    &lt;video src=&quot;/movies/password.mp4&quot; controls=&quot;&quot;&gt;&lt;/video&gt;
    &lt;figcaption&gt;Password input in Microsoft Edge that allows the user to toggle password visibility.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3&gt;Allow for fine motor control issues&lt;/h3&gt;

&lt;p&gt;Many of the sites and applications that I use assume that everyone has the same amount of control over their mouse as everyone else. While I still have a fair amount of control I’m certainly not as precise as I used to be. It’s worth pointing out as well that the mouse isn’t the only form of input that people use. Larger trackpads, switch controls, and other devices are often used in place of a mouse. &lt;em&gt;The traditional line of thinking that complex, precise interactions are okay as long as they are also accessible via the keyboard is incorrect&lt;/em&gt;. There are a lot of capabilities that fall in between keyboard access and fine motor control over the mouse that you should plan for. Here are just a few of the issues I regularly deal with:&lt;/p&gt;

&lt;h4&gt;Don’t autoplay videos&lt;/h4&gt;

&lt;p&gt;There are so, so many &lt;a href=&quot;http://a11yproject.com/posts/never-use-auto-play/&quot; title=&quot;Why auto playing videos harms accessibility&quot;&gt;reasons not to autoplay video&lt;/a&gt;, but I’m happy to add one more. Like most people I often browse several tabs at a time. Clicking through them to stop the myriad of videos that inevitably load and play is time-consuming and tiring. In the rare case that I actually did want to watch the video my inability to quickly maneuver on the page means I have to stop the video and back it up in order to watch it all. This also means that I have to watch whatever ad content is tacked onto it twice. I know these decisions are generally driven by marketing people but let’s make an effort, shall we?&lt;/p&gt;

&lt;h4&gt;Avoid hover-only controls&lt;/h4&gt;

&lt;p&gt;Whether it’s navigation, tool tips, or widget settings interacting with hover-based controls can be extremely frustrating. It’s easy for people like me to wander outside the hover area while trying to make a selection and have to start the entire process over again. It’s even worse when those controls are programmed with a timeout option that removes the dialog after a specific amount of time. For people that use inputs like switch controls it makes it extremely difficult for them to complete the task in the allotted time. I’m a huge fan of how &lt;a href=&quot;https://codepen.io&quot; title=&quot;codepen.io&quot;&gt;Codepen&lt;/a&gt; handles their controls. Any control that is accessed via a hover interaction either remains on the screen until the user clicks focus away from it or introduces a modal window that makes it much easier for the user to complete their task.&lt;/p&gt;

&lt;p&gt;This is especially important for navigation. When creating drop-down menus or complex menu interactions carefully consider the amount of distance you are asking the user to travel and the hit target required by the menu. Allowing any drop-down content to remain visible until focus has been moved away from the menu creates a much more accessible navigation pattern. To show you what I mean I recorded a video of me interacting with the &lt;a href=&quot;http://sasquatchfestival.com/&quot; title=&quot;official site of the Sasquatch music Festival&quot;&gt;Sasquatch Music Festival&lt;/a&gt; site. I’ve attended this festival multiple times and love it dearly, but in this case notice how difficult it is for me to access their FAQ page. This was actually my most successful attempt, the hover-only controls mixed with a small hit area and a large travel distance makes this menu very difficult to use for anyone with fine motor control issues.&lt;/p&gt;

&lt;figure&gt;
    &lt;video src=&quot;/movies/menu.mp4&quot; controls=&quot;&quot;&gt;&lt;/video&gt;
    &lt;figcaption&gt;Me attempting to access the FAQ page.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4&gt;Infinite scrolling considerations&lt;/h4&gt;

&lt;p&gt;Aside from the &lt;a href=&quot;https://www.nngroup.com/articles/infinite-scrolling/&quot; title=&quot;usability concerns for infinite scrolling&quot;&gt;oft-mentioned usability concerns&lt;/a&gt;, infinite scrolling can be problematic for people with limited motor functionality. For sites with active timelines like Twitter and Facebook the use of infinite scrolling makes sense. However I’ve encountered instances of infinite scrolling that could have easily split content into multiple pages or offer alternate ways to find and consume content. Long periods of scrolling can be tiring, especially if I’m using the scroll wheel for extended periods of time. My imprecise use of the mouse usually creates problems when new content is loaded. Instead of seamlessly loading the next block of content I tend to jump past newly loaded content forcing me to scroll back up to find the point I left off. In some cases I become so frustrated I stop looking for content and leave the site. Make sure that if infinite scrolling is implemented on your site that your scrolling is smooth and content loading is unobtrusive and seamless. In a perfect world you can give the user a choice between infinite scrolling, pagination, or other ways to discover content.&lt;/p&gt;

&lt;h3&gt;Be mindful of touch&lt;/h3&gt;

&lt;p&gt;Touchscreens have often been touted as easier to use for people with motor control issues. There certainly are some tasks that are easier for me to perform on my phone than on my laptop. Most mobile devices have integrated accessibility controls that give people with disabilities additional options not typically found on personal computers. &lt;em&gt;You shouldn’t assume however that touch is intrinsically better when dealing with mild to medium level motor impairments&lt;/em&gt;. Here are some issues to consider when designing for touch:&lt;/p&gt;

&lt;h4&gt;Avoid small hit targets&lt;/h4&gt;

&lt;p&gt;Apple actually did a pretty good job of educating people about the importance of larger hit areas. Dubbed the “fat fingers” rule we were told to make our hit targets a minimum of 44px x 44px. As phone sizes have gotten larger and the viewport easier to control that seems to have gone out the window. Take for example Apple’s default messenger application. Because of the larger screen sizes of the iPhone 6 and 7, they have crammed more and more items into the keyboard and controls. Since I’m still using an iPhone 5 the screen real estate is not large enough to comfortably hold all of the inputs. It’s much easier for me now to dictate text messages rather than type them, but the reduced size of the icons and my less than stellar fine motor control usually results in me unintentionally switching keyboards five or six times or hitting the spacebar several times before finally triggering dictation. Equally problematic is the input field for the text message itself. So little screen real estate remains that instead of merely triggering a text I end up selecting insert media or any of the other myriad options rather then a simple text message. When designing hit targets make sure you not only have a large enough hit area but there is enough negative space around it to avoid unwanted selections. Remember it’s not just the size on someone’s finger that you’re designing for it’s also the amount of control they have over that finger.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/images/ios-keyboard.png&quot; alt=&quot;IOS keyboard on an iPhone 5&quot; /&gt;
    &lt;figcaption&gt;So many inputs, so little space.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4&gt;Provide alternate controls for touch gestures&lt;/h4&gt;

&lt;p&gt;Perhaps my biggest pet peeve among touch-based interactions is applications that rely solely on touch gestures for control. Take Apple Maps and Google Maps for example. It’s typical for me to act as a navigator for my wife, which means that the majority of the time I’m using these apps in a moving vehicle. For most people a pinch zoom gesture is quick and simple, but for me it’s almost impossible. At this point I have to use two hands to perform a pinch zoom and almost invariably I will include unwanted gestures in my attempt to perform one. This means that the simple task of moving around a map and zooming in and zooming out is incredibly difficult for me (if not impossible) in a moving car. Thankfully Google has an alternate input for zooming in and out. If I tap twice and hold the second tap I can swipe up or down to zoom in and out. Since this only requires one finger it’s much easier for me to achieve. Apple Maps has no alternative zoom function that I can find and has become largely useless to me. To illustrate this I recorded a video of me simply trying to zoom in and out in Apple Maps and another video of me zooming in and out as well as navigating on the map in Google Maps.&lt;/p&gt;

&lt;div class=&quot;flex-row&quot;&gt;
&lt;figure&gt;
    &lt;video src=&quot;/movies/apple.mp4&quot; controls=&quot;&quot;&gt;&lt;/video&gt;
    &lt;figcaption&gt;Pinch zoom in Apple Maps.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
    &lt;video src=&quot;/movies/google.mp4&quot; controls=&quot;&quot;&gt;&lt;/video&gt;
    &lt;figcaption&gt;Pinch zoom in Google Maps.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Notice how in Apple Maps the attempt at a pinch zoom gesture results in moving the map location and orientation rather than zooming. As this was done at my desk in my office imagine how much more difficult it would be for me in a moving car. In the Google Maps example you can see how much easier it is for me to move around and zoom using the alternate gesture. While I certainly appreciate Google Maps inclusion of a secondary method it is far from perfect. First, it’s non-intuitive, as I had to perform a Google search in order to discover it. Second, a far better solution would be to allow users an option in the settings that overlays zoom controls on the map. This would require no gestures and give people with motor control issues even more control over the map.&lt;/p&gt;

&lt;p&gt;Touch gestures can be incredibly complex, some even requiring three fingers to complete. Don’t assume that your users will be able to perform even the simplest of gestures. By giving them intuitive access to alternate controls you will make your application more inclusive and easier to use for everyone.&lt;/p&gt;

&lt;h3&gt;Final thoughts&lt;/h3&gt;

&lt;p&gt;Designing for motor impairments requires as much consideration as other disabilities but doesn’t really have a single approach that guarantees accessibility. Rather you need to consider how your interactions might limit those with motor function disabilities and whether or not you can modify them to be more inclusive or provide alternate means of addressing them. Far from being a niche concern, visitors with some form of motor impairment likely make up a significant percentage of your users. I would encourage you to test your website or application with your less dominant hand. Is it still easy to use? If touch is involved try completing your interactions with a single finger other than your index finger. Can you still complete all the tasks? Designing with these restrictions in mind will create a more inclusive site and likely result in a better user experience for everyone.&lt;/p&gt;

</description>
        <pubDate>Wed, 12 Jul 2017 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/motor</link>
        <guid isPermaLink="true">http://localhost:4000/blog/motor</guid>
        
        <category>ALS</category>
        
        <category>web design</category>
        
        <category>accessibility</category>
        
        
      </item>
    
      <item>
        <title>The Long Goodbye</title>
        <description>&lt;p&gt;I’ve been meaning to write this post for a while now, in fact it was the main reason I started blogging again. It’s a hard post to write, because I have some very difficult news to share. Although I have told many of you in private I haven’t made a public announcement, so here it is: I am terminally ill.&lt;/p&gt;

&lt;p&gt;Just over four years ago I was diagnosed with ALS. Thanks to events like the ice bucket challenge most people know at least the basics of the disease. If you aren’t familiar with it, ALS is a motor neuron disease that slowly paralyzes you and gradually takes away your ability to eat, communicate, and breathe. As of right now there is no cure, although some promising treatments are on the horizon. I have no idea how much time I have left, and whether I’ll be able to hang on until a viable treatment exists, but I don’t really focus on that. Instead I focus on making the most of the time I have left.&lt;/p&gt;

&lt;p&gt;Some of you may be wondering why I waited so long to publicly discuss my diagnosis. I don’t have a great answer for that; in fact it was something that I wondered about myself until I read the amazing blog post where &lt;a href=&quot;http://www.backupbrain.com/2016/05/ive-had-a-big-secret-now-im-sharing-it/&quot; title=&quot;Blog post by Tom Negrino discussing his cancer diagnosis&quot;&gt;Tom Negrino&lt;/a&gt; discussed his own terminal cancer diagnosis. He waited almost until the very end to address it because, as he put it, “I didn’t want to publicly become Cancer Guy.” I can identify with that. ALS is merely something I have, it doesn’t define me and I’ve always wanted the focus to be on my work and what I contribute to the community. I chose to go public now because the disease has finally progressed to the point that I can no longer hide it. Several of you have asked me why I haven’t published a course lately or why I stopped speaking at events. Now you know. Earlier this year I had to step away from my role as a full-time author at &lt;a href=&quot;http://lynda.com&quot; title=&quot;lynda.com&quot;&gt;lynda.com&lt;/a&gt;. It was an incredibly difficult decision forced upon me by this terrible disease.&lt;/p&gt;

&lt;p&gt;I want to thank the incredible people at lynda and LinkedIn for their support. I’m beyond blessed to be a part of organizations that value their people and help them through difficult times. To list all the ways that they have supported me and helped me to stay productive for as long as I could would require a totally separate blog post. Let’s just say everyone went above and beyond for me and for that I will be eternally grateful.&lt;/p&gt;

&lt;h3&gt;So how am I doing now?&lt;/h3&gt;

&lt;p&gt;ALS is an incredibly individual disease. Most people survive for about 2 to 5 years after their initial diagnosis, but everyone progresses in different ways and at different speeds. Seen in that light I’m doing pretty well. My speech and swallowing have not been greatly affected yet, so I’m still able to communicate and eat normally. My extremities have been involved the most, as a result I’m no longer able to walk and fine motor control is difficult. I need assistance doing basic chores that most people take for granted like brushing my teeth or getting dressed. Typing has been reduced to a single finger, so I use voice dictation for most of my writing. The most threatening aspect for me at the moment is my breathing. My diaphragm was affected very early on and now it is difficult for me to breathe on my own. I use a device called a NIV that allows me to take full breaths during the day and to sleep at night in a prone position. Although the physical part of the disease is taxing the mental part is probably the worst. It’s difficult to continually adjust to losing more and more of your abilities when the reminders of who you used to be are all around you. In my closet are running shoes that I will never use again, in my garage is a mountain bike gathering cobwebs, and in my driveway is a basketball goal that I can no longer use to play with my kids. I refer to it as the “long goodbye.” On the one hand it’s a blessing to be able to let the people around you know how much you love and appreciate them. On the other it’s very difficult to have your life slowly fall away from you piece by piece. Thankfully I am surrounded by a loving family and an amazing community of friends. Just knowing that you are loved and having so many people willing to help out in any way is incredible and I am extremely blessed.&lt;/p&gt;

&lt;h3&gt;What’s next?&lt;/h3&gt;

&lt;p&gt;Since I can no longer record courses and it’s difficult to speak publicly I plan on using this blog as a way to continue to contribute to the web community. As you can imagine I’m increasingly focused on accessibility, so I plan on writing several posts on what I’ve learned as my disability has grown. I will also probably start writing a few more personal posts since the blog is a good way of keeping everyone up to date with how I am doing. I’ll be doing a fundraiser fairly soon for ALS research so please be on the lookout for that.&lt;/p&gt;

&lt;p&gt;Thank you all for your support. If you have ever watched one of my courses, attended one of my workshops, or watched me speak at a conference you’ve helped me have a career that allowed me to do what I love. I can’t thank you enough for that and I hope that in some small way I have helped you grow and advance as web developer. Messages of support are great, so feel free to reach out via &lt;a href=&quot;https://twitter.com/jameswillweb&quot; title=&quot;my twitter profile&quot;&gt;Twitter&lt;/a&gt; or by &lt;a href=&quot;/contact.html&quot; title=&quot;contact page&quot;&gt;contacting me directly through this blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I love you all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mygirls.jpg&quot; alt=&quot;My daughters and I at the beach&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Jun 2017 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/long-goodbye</link>
        <guid isPermaLink="true">http://localhost:4000/blog/long-goodbye</guid>
        
        <category>ALS</category>
        
        <category>personal</category>
        
        <category>accessibility</category>
        
        
      </item>
    
      <item>
        <title>Designing for the Unexpected</title>
        <description>&lt;p&gt;Before I began doing web design and education full-time I was the art director at Discovery Place, a children’s science museum in Charlotte, North Carolina. Like most children’s museums the exhibits were interactive and designed to engage kids by being hands-on and fun. Helping to design new exhibits was challenging and an amazing amount of fun. I learned a lot through this process, but perhaps the biggest lesson I learned was to attempt to expect the unexpected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/air-chair.jpg&quot; alt=&quot;My daughter Reagan in the Air Chair at Discovery Place&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No matter how good we felt about a new exhibit we never knew whether it was a success or not until we could spend some time observing how people interacted with it. Kids are particularly amazing at ignoring what you would like them to do and instead doing some crazy thing that you never expected. One of the first things I did was to institute what I called the “one hour in the ranch” rule. Our offices and fabrication shop were located across the street from the museum, which was nicknamed “the ranch.” Everyone on my design staff was required once a week to go into the museum with a sketchbook, pick one exhibit, and then sketch and take notes of how the kids interacted with it. The insights we gained from these sessions were invaluable. Over and over again we saw kids, and often adults, doing the unexpected. By observing what the visitors to the museum were &lt;em&gt;actually&lt;/em&gt; doing we were better able to predict what they &lt;em&gt;might&lt;/em&gt; do with future exhibits.&lt;/p&gt;

&lt;p&gt;For us this was a real challenge, as we followed a very specific set of design principles for each project. If we failed to adequately design for those principles there were some very real consequences. These principles were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The exhibit must be as safe as possible&lt;/strong&gt;. When you are designing interactive exhibits for children (which can often be at a very large scale) safety has to be the number one priority. That’s not as easy as it seems, especially given the unpredictable nature of people. I remember one exhibit in particular that got all the way through the design stage and into fabrication before someone noticed the perforations in the steel plates we were using weren’t small enough. If they were too big it would be easy for a child to accidentally get their finger caught in one and suffer an injury. This is where the unexpected worried you the most, safety is never guaranteed but we wanted to make sure that we minimized the risk as much as possible.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The exhibit must be engaging&lt;/strong&gt;. The sensory overload in a children’s science museum is somewhere between an elementary school recess and a Friday night at Chuck E Cheese. To be successful an exhibit must attract and engage children to interact with it, otherwise there is no chance of it actually educating. At first this sounds like it would require each exhibit to be as flashy and loud as possible. However we found that by interspersing quiet spaces among the more kinetic exhibits we actually increased engagement. Just as no two adults are quite alike no two kids are exactly the same either. We learned to design the engagement around the experience and not the child. In doing so we were much more successful.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The exhibit must educate&lt;/strong&gt;. Each exhibit had a set of learning objectives put forth by the S&amp;amp;E (Science and Education) department. Sometimes these were easy to envision, such as demonstrating magnetic polarity. Other times they were a bit more conceptual, like educating about water consumption. Often we would ask them to pare down the objectives or focus them a bit more. Exhibits that had a single focus, or that taught along a narrative were always easier to design and more successful than those that tried to teach multiple concepts at once. We also tried to design so that some questions were left open-ended so that visitors would seek out the answers on their own.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The exhibit must be as accessible as possible&lt;/strong&gt;. I have to admit that we often failed at this one. By their nature many of the exhibits were kinetic and designed for play. The goal was to ensure that regardless of the physical design that there were certain elements that could be interacted with by everyone. Through observing how children interacted with some exhibits and avoided others I learned a lot about what accessibility means and have carried that into my work on the web. I learned to not make assumptions about disabilities and who might want to engage with an exhibit and instead make the experience as inclusive as possible.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The exhibit should properly focus the user on the desired task&lt;/strong&gt;. This was probably the most difficult of all our principles because of the unpredictable nature of how someone might interact with it. A good design should be self explanatory, meaning there should be minimal instructions and graphics necessary in order for people to successfully complete the task or engage with it properly. It’s much easier to simply rely on step-by-step instructions to guide the visitor through the experience. However we found that printed instructions were often either missed or ignored. Audible instructions, on the other hand, were much more effective &lt;em&gt;and&lt;/em&gt; more inclusive. If the exhibit wasn’t focused properly the overall user experience tended to be frustrating or evolved into something unintended.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Although my time at Discovery Place was far removed from web design the lessons I learned there carried over seamlessly. I learned that there is no single “user story” that you can design for. Often we spend weeks with our Post-it notes trying to define our users into clearly defined categories. There certainly is value in this, however we shouldn’t ignore the fact that many of our users will be edge cases or not behave the way we expect them to. What kind of experience will they have on your site or app? Are your interactions focused enough to guide the user through them on their own, or are they likely to get frustrated and perhaps give up if it is not clear enough? Is your site accessible and inclusive so that everyone can participate?&lt;/p&gt;

&lt;p&gt;Perhaps the biggest lesson I learned is this; observe how people use and interact with your design and continue to tweak it to accommodate them. Web analytics are great at showing us things like conversion rates, traffic patterns, and overall usage but often fail to expose the things that frustrate our users or point out how people might be using our designs in unanticipated ways. Make sure there are ways for your users to communicate with you and look for patterns that show failures, especially those that reveal unexpected requirements. Some of the most amazing discoveries are to be found in these unexpected places.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/led.jpg&quot; alt=&quot;My daughters looking at an LED exhibit at Discovery Place&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Jun 2017 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/unexpected</link>
        <guid isPermaLink="true">http://localhost:4000/blog/unexpected</guid>
        
        <category>web design</category>
        
        <category>graphic design</category>
        
        <category>accessibility</category>
        
        
      </item>
    
      <item>
        <title>It's What You Make, Not How You Make It.</title>
        <description>&lt;p&gt;Lately there has been a lot of discussion about the pros and cons of authoring HTML and CSS directly in JavaScript. Since web design is a subject that people get pretty passionate about, there’s been a fair amount of heated debate over it. In one camp you have developers coming from an app-dev background who see it as an efficient way to architect sites and increase maintainability. On the other side you have web purists who feel the practice results in bad code and violates the &lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_concerns&quot; title=&quot;Wikipedia entry on the separation of concerns&quot;&gt;separation of concerns&lt;/a&gt; that has formed the bedrock of the web for so long.&lt;/p&gt;

&lt;p&gt;If I had to place myself in one camp or the other it would certainly be on the side of the web purists. I’ve dedicated the last 15 years or so to teaching HTML and CSS with a focus on web standards and accessibility. So I feel very strongly that any new methodology that might result in degrading the quality of the underlying code should be examined with a critical eye. However, one thing I’ve learned over the years is not to cling to one specific approach to authoring content with any sort of dogmatic view. The web is a constantly shifting landscape of technologies, strategies, consumers, and content. If there is one thing that we can be 100% sure of, it is change.&lt;/p&gt;

&lt;p&gt;So I’m really not interested in advocating for one approach or another, that’s been &lt;a href=&quot;http://tomdale.net/2015/02/youre-missing-the-point-of-server-side-rendered-javascript-apps/&quot; title=&quot;Tom Dale's take on server-side versus client-side rendered apps&quot;&gt;done before&lt;/a&gt; by people &lt;a href=&quot;https://css-tricks.com/the-debate-around-do-we-even-need-css-anymore/&quot; title=&quot;CSS tricks article on writing CSS in JavaScript&quot;&gt;much smarter&lt;/a&gt; and &lt;a href=&quot;http://keithjgrant.com/posts/2017/03/css-is-not-broken/&quot; title=&quot;article by Keith Grant on how CSS is not broken&quot;&gt;more involved&lt;/a&gt; than me. I myself use JavaScript to help assemble pages, convert Markdown files, and generate this blog, so it would be pretty hypocritical of me to condemn it out of hand, and although I don’t use them personally the majority of the web community uses CSS preprocessors to help author their stylesheets. JavaScript as an authoring tool is here to stay. That horse, as they say, is out of the barn. What I want to talk about is how we should be careful to ensure that our tools and methodologies serve us and not the other way around.&lt;/p&gt;

&lt;p&gt;As the web has become more complex we have sought to create new and more efficient ways to architect our sites. The move towards component-based design has created an entirely new level of complexity to deal with. Methodologies like BEM, OOCSS, and SMACSS began to dominate CSS authoring, and libraries like React and Angular have become de facto standard authoring tools in many environments. While these tools have brought many benefits to authors they have unfortunately created the perception that HTML and CSS are second-class citizens. Many people now view the &lt;a href=&quot;https://medium.com/@zamarrowski/css-is-broken-5138773e17a5&quot; title=&quot;CSS is broken&quot;&gt;global nature of CSS as a problem&lt;/a&gt; and specificity as something to be overcome instead of the &lt;a href=&quot;https://www.smashingmagazine.com/2016/11/css-inheritance-cascade-global-scope-new-old-worst-best-friends/&quot; title=&quot;article on the benefits of the cascade by Heydon Pickering&quot;&gt;powerful scoping feature&lt;/a&gt; that it is. HTML, and the native semantics and controls it offers, are often thrown out in favor of using generic DIVs and SPANs to build one widget after another. Most of the production code I explore today is a nested soup of DIV elements that would give our table layouts of yesterday a run for their money. In many cases our tools are to blame, as many are designed to architect code in this manner, or at least don’t contain mechanisms to prevent it. The recent move to in-line CSS inside JavaScript and to rendering HTML in the client at run-time are simply extensions of this approach.&lt;/p&gt;

&lt;p&gt;Because of this much of the blame has been placed directly on JavaScript and JavaScript developers themselves. Many times the argument has been made that developers don’t take the time to learn and understand HTML and CSS, and in some cases there is certainly truth to this. Part of me wonders though why we haven’t done a better job of creating tools that enforce web standards and take advantage of the benefits that HTML and CSS offer? I’m not saying that our tools should be restrictive, just that they should make it easier to write solid code, not harder. To me it doesn’t matter whether you write your HTML and CSS by hand or use JavaScript to generate it for you. What matters is the output, how it is structured, and how it is served to the client. When we allow our tools to take precedent over the quality of our output the entire web suffers. Sites are likely to be less accessible, less performant, and suffer from poor semantics.&lt;/p&gt;

&lt;p&gt;Perhaps it’s already too late to change direction. I’m already conditioned for a poor experience when browsing most large media sites. Even over a fast connection most of those sites are slow to load, are so ad and marketing heavy they interrupt the consuming of content, and frequently break. It’s gotten to the point that when I experience a fast, well-constructed site I’m usually shocked. If I feel this way I can only imagine how people not in the industry feel. As they wait for dozens of dependencies to load, or for their browser to render client-side HTML, I wonder how many of them simply shrug and blame their connection?&lt;/p&gt;

&lt;p&gt;Clearly the need to continue to educate web professionals and to refine and improve our existing toolsets is important. Our responsibility as a community is to encourage best practices, educate people about their importance, and show a demonstrable difference between the approaches so that there is an incentive to change that is based on more than “it’s the right thing to do.” There are major gains to be had by architecting our code the right way, let’s keep focusing on those and not the means by which we get there.&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Jun 2017 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/make</link>
        <guid isPermaLink="true">http://localhost:4000/blog/make</guid>
        
        <category>html</category>
        
        <category>css</category>
        
        <category>javascript</category>
        
        <category>web standards</category>
        
        
      </item>
    
      <item>
        <title>Blog Relaunch</title>
        <description>&lt;p&gt;Welcome to my Simple Primate blog relaunch! Around 2007 I started this blog as a way to connect with my students at Lodestone, discuss my speaking engagements, and promote my ever-growing catalog of courses on &lt;a href=&quot;https://www.lynda.com/James-Williamson/128-1.html&quot; title=&quot;my courses on Lynda.com&quot;&gt;lynda.com&lt;/a&gt;. Shortly after starting it I made a change and became a full-time author at lynda. Unfortunately changing my focus had an almost immediate effect on my blog, which went dormant. I should have channeled even more energy into the blog and used it to supplement my courses, including all the details that I couldn’t fit into them. Truthfully though after a full day of writing for my courses I very rarely felt like firing the code editor back up and blogging. I also became very frustrated with WordPress. Unlike my friend &lt;a href=&quot;https://mor10.com/&quot; title=&quot;Morten Rand-Hendriksen&quot;&gt;Morten&lt;/a&gt;, I found it tedious to make minor edits and didn’t feel like becoming a WordPress developer just to build my blog the way I wanted to.&lt;/p&gt;

&lt;p&gt;Of course, those are all just excuses. So many of the people I admire in the web development field give back to the community freely and in a way that allows all of us to benefit from their hard work. I remember listening to a keynote from Chris Coyier where he talked about being asked over and over again “how do you keep up with everything going on in web design with your schedule?” He laughed about it and kind of played it off but his basic response was, “it’s my job.” That hit home with me, because for almost 20 years now my job has been to educate people in design and web development. However almost everything I’ve done has been behind one paywall or another. I’ve been extremely blessed to be able to build a career doing something that I love and that I’m passionate about. I just need to do a better job of giving back to that community.&lt;/p&gt;

&lt;p&gt;So it’s in that spirit that I relaunch my blog. I’m positive I won’t be as prolific as many of my contemporaries, and I know I am not as insightful or intelligent as many of the people that I plan on profiling here in the future. However if I am able to share some of what I’ve learned over the course of my career and help those that are seeking to deepen their understanding of web design then I will consider it a success.&lt;/p&gt;

&lt;p&gt;It also helps that I’ve switched to &lt;a href=&quot;https://jekyllrb.com/&quot; title=&quot;static site generator Jekyll&quot;&gt;Jekyll&lt;/a&gt; to build my blog. I finally have the level of control over my HTML and CSS that I wanted. It allows me to build a simple, bare-bones blog that is a snap to maintain and publish with.&lt;/p&gt;

&lt;p&gt;To give the blog a bit of a kickstart I’ve included some posts that have been pulled from a couple of my courses. Many of the posts come from my Jekyll for Web Designers course and I have also included a post on learning Git from my Github for Web Designers course. They should give you an idea of the type of content I plan on adding. I will also be doing good bit of personal posting, for reasons that will become clear in the near future.&lt;/p&gt;

&lt;p&gt;Thank you for all of the support over the years and I’m looking forward to making this blog something worth reading.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Jun 2017 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/relaunch</link>
        <guid isPermaLink="true">http://localhost:4000/blog/relaunch</guid>
        
        <category>blogging</category>
        
        
      </item>
    
      <item>
        <title>Jekyll Deployment Options</title>
        <description>&lt;p&gt;Once you’ve finished building your Jekyll site you’ll need to decide where and how you want to deploy it. Since Jekyll builds static content you can serve it almost anywhere. There are no server-side dependencies, CMS installations, database administrators, or server stacks to worry about. If the server can handle HTML, CSS, and JavaScript, it can serve your site. With that in mind let’s take a look at some of the most common options for deploying Jekyll sites.&lt;/p&gt;

&lt;h3&gt;FTP/SFTP&lt;/h3&gt;

&lt;p&gt;Almost all hosting companies allow you to upload content via FTP or SFTP. Simply use a FTP client (such as &lt;a href=&quot;https://filezilla-project.org/&quot; title=&quot;Filezilla&quot;&gt;Filezilla&lt;/a&gt;) to upload the contents of your &lt;strong&gt;_site&lt;/strong&gt; directory to the &lt;strong&gt;www&lt;/strong&gt; or &lt;strong&gt;public_html&lt;/strong&gt; directory of your hosting server. One downside to this method is the manual nature of updating your site. When files change you’ll need to manually overwrite your remote files. For larger sites this can be time-consuming and prone to errors.&lt;/p&gt;

&lt;p&gt;One option for enhancing FTP deployment is to use a Git-integrated FTP client like &lt;a href=&quot;https://github.com/git-ftp/git-ftp&quot; title=&quot;git-ftp&quot;&gt;git-ftp&lt;/a&gt;. This allows you to bring version control into your deployment workflow and only upload the files that have changed.&lt;/p&gt;

&lt;h3&gt;Git&lt;/h3&gt;

&lt;p&gt;Speaking of Git, if you’re using it to source-control your site, you can set it up to push to your web server when it’s time for deployment. To do this you’ll need to set up a post-update hook on your remote server. You’ll also, of course, need Git installed on your server and SSH access. This method of deployment is a little more technical than others, so you’ll need to be comfortable with Git, the command line interface, and writing basic scripts. &lt;a href=&quot;http://nicolasgallagher.com/simple-git-deployment-strategy-for-static-sites/&quot; title=&quot;Git for static sites&quot;&gt;Nicolas Gallagher wrote one of the best posts&lt;/a&gt; on the subject that I’ve seen, though a quick Google search will return several articles detailing versions of this workflow.&lt;/p&gt;

&lt;h3&gt;Deployment Web Services&lt;/h3&gt;

&lt;p&gt;Several online services offer deployment workflows for apps and sites. Most offer tiers of services that range from free to monthly fees based on the size and number of sites you’ll be updating. While many of their services aren’t really necessary for smaller static sites, the convenience of having your deployment automated with a single click is pretty nice, and the extra features can come in handy as your site grows. Check out &lt;a href=&quot;http://beanstalkapp.com/&quot; title=&quot;Beanstalk&quot;&gt;Beanstalk&lt;/a&gt;, &lt;a href=&quot;http://deploybot.com/&quot; title=&quot;Deploybot&quot;&gt;DeployBot&lt;/a&gt;, &lt;a href=&quot;https://www.netlify.com/&quot; title=&quot;Netlify&quot;&gt;Netlify&lt;/a&gt; and &lt;a href=&quot;https://travis-ci.org/&quot; title=&quot;Travis CI&quot;&gt;Travis CI&lt;/a&gt; for a good idea of how these services work and if they’re right for you.&lt;/p&gt;

&lt;h3&gt;Github&lt;/h3&gt;

&lt;p&gt;Github uses Jekyll to power it’s Github Pages feature, so it’s only natural that deploying Jekyll sites through Github is quick and easy. You can even host your personal or project site for free on Github. You have two options for serving your site: user/organization or as a project page. Each Github user gets one free user/organization Github Pages site, and unlimited project pages. Organization pages are served as the “home” site for the user, so it’s served at &lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.io.&lt;/code&gt; Project pages are served as subdomains, so they would be served at &lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.io/project-name.&lt;/code&gt; The only real difference between the two methods is how you format relative links, as project pages have the project name directory as part of their base URL. You can even redirect a custom domain to your Github Pages site, which makes it a very attractive choice for hosting personal blogs and smaller sites.&lt;/p&gt;

&lt;p&gt;The workflow for deploying to Github Pages is simple. Login to your Github account, create a new repo, and then point your local repo to use the new Github repo as its remote. Create a new branch called &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; and push everything except the &lt;strong&gt;_site&lt;/strong&gt; directory to your new Github repo. Github will detect the Jekyll site, build it, and serve the site at the appropriate URL. From there, updating the site is as simple as writing a new Markdown file and making a push.&lt;/p&gt;

&lt;h3&gt;More information&lt;/h3&gt;

&lt;p&gt;For more information on deploying Jekyll sites (and more options), check out the section on &lt;a href=&quot;http://jekyllrb.com/docs/deployment-methods/&quot; title=&quot;deployment methods&quot;&gt;deployment methods&lt;/a&gt; in Jekyll’s documentation.&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Aug 2015 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/deployment-options</link>
        <guid isPermaLink="true">http://localhost:4000/blog/deployment-options</guid>
        
        <category>jekyll</category>
        
        <category>deployment</category>
        
        <category>github pages</category>
        
        <category>git</category>
        
        <category>jekyll for web designers</category>
        
        
      </item>
    
      <item>
        <title>Jekyll and CSS</title>
        <description>&lt;p&gt;One of my favorite things about Jekyll is how it gets out of the way and lets you, the designer, actually design. Jekyll imposes no type of structure or framework, no default classes, layout, or coding conventions. You’re free to structure and style your content as you see fit. As such how you plan and author your styles is entirely up to you. There are, however, a few things you want to keep in mind when writing CSS for a Jekyll site.&lt;/p&gt;

&lt;h3&gt;Location&lt;/h3&gt;

&lt;p&gt;Normally I like to keep styles in a directory titled &lt;strong&gt;_css&lt;/strong&gt;. This naming convention doesn’t work for Jekyll, as an underscore at the beginning of a directory signals Jekyll to process the contents of the directory and not to include it in the final directory structure. As such to ensure your CSS is copied to the finished site be sure to name it &lt;strong&gt;css&lt;/strong&gt; or a similar name that doesn’t start with an underscore.&lt;/p&gt;

&lt;h3&gt;Linking&lt;/h3&gt;

&lt;p&gt;There are essentially two ways to link to external resources like CSS within Jekyll pages and templates. One would be to use the site baseURL to prefix your CSS files:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.baseurl }}/css/main.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If your site will always be served from the root folder, you can eliminate the &lt;code class=&quot;highlighter-rouge&quot;&gt;site.baseurl&lt;/code&gt; object and just use a &lt;strong&gt;site-root relative&lt;/strong&gt; link:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/css/main.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s important to note here that relative links for assets like CSS can be difficult when hosting sites on &lt;a href=&quot;https://pages.github.com/&quot; title=&quot;Github Pages&quot;&gt;Github Pages&lt;/a&gt;. Essentially there are two ways to host pages on Github Pages, as either user/organization pages or project pages.&lt;/p&gt;

&lt;p&gt;User and organization pages live in a GitHub repository dedicated to only the GitHub Pages files and are stored in the &lt;strong&gt;master branch&lt;/strong&gt;. This repository must be named after the account name, which will be &lt;strong&gt;username.github.io&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Project Pages are stored in the same repository as the project they are for, except that the website content is stored in a specially named &lt;strong&gt;gh-pages&lt;/strong&gt; branch. The &lt;strong&gt;master&lt;/strong&gt; branch can hold the project itself, or even be empty.&lt;/p&gt;

&lt;p&gt;This matters because if the site is served through a project page, its baseURL changes as the site is served through a subpath of your user domain at &lt;strong&gt;username.github.io/project&lt;/strong&gt;. This means that in these cases, you’ll need to set your baseURL to &lt;code class=&quot;highlighter-rouge&quot;&gt;/project-name&lt;/code&gt;. Note the leading slash and no trailing slash. This can also lead to problems when testing the files locally, so be sure to read Jekyll’s documentation on &lt;a href=&quot;http://jekyllrb.com/docs/github-pages/&quot; title=&quot;Github Pages documentation&quot;&gt;hosting with Github Pages&lt;/a&gt; for a full account.&lt;/p&gt;

&lt;h3&gt;Jekyll and SASS&lt;/h3&gt;

&lt;p&gt;Jekyll comes with built-in support for SASS, so there’s no need to install or modify your configuration in order to make it work. There are, however, one or two things you need to keep in mind as you work with SASS in Jekyll.&lt;/p&gt;

&lt;p&gt;First, in order to ensure Jekyll processes SASS files, you need to put an empty front matter string at the top of the page. You can include a comment if you’d like, but it doesn’t really matter. So include this at the top of each SASS file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
# Front matter added to ensure Jekyll processes file.
---

// write styles after front matter

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you look at Jekyll’s default directory structure, you no doubt saw the &lt;strong&gt;_sass&lt;/strong&gt; directory, which can lead to some confusion about where to place SASS files. Jekyll copies over any processed SASS file in the exact same location it was processed. So, if you have the file &lt;strong&gt;css/styles.scss&lt;/strong&gt; it will be processed and placed at &lt;strong&gt;css/styles.css&lt;/strong&gt; in the generated site. The &lt;strong&gt;_sass&lt;/strong&gt; directory is for SASS import files. If you place the partial &lt;code class=&quot;highlighter-rouge&quot;&gt;.scss&lt;/code&gt; files that you are importing and use &lt;code class=&quot;highlighter-rouge&quot;&gt;@import&lt;/code&gt; to assemble them into your main stylesheet, Jekyll will process and assemble them at runtime.&lt;/p&gt;

&lt;p&gt;So if you do something like this in your main &lt;code class=&quot;highlighter-rouge&quot;&gt;.scss&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
# Front matter added to ensure Jekyll processes file.
---

// Imports
@import &quot;type&quot;;
@import &quot;layout&quot;;
@import &quot;components&quot;;

//styles
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Place the files &lt;code class=&quot;highlighter-rouge&quot;&gt;type.scss&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;layout.scss&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;components.scss&lt;/code&gt; in the &lt;strong&gt;_sass&lt;/strong&gt; directory and Jekyll will do the rest!&lt;/p&gt;

</description>
        <pubDate>Mon, 13 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/css</link>
        <guid isPermaLink="true">http://localhost:4000/blog/css</guid>
        
        <category>jekyll</category>
        
        <category>web design</category>
        
        <category>css</category>
        
        <category>github pages</category>
        
        <category>sass</category>
        
        <category>jekyll for web designers</category>
        
        
      </item>
    
      <item>
        <title>YAML front matter in Jekyll</title>
        <description>&lt;p&gt;YAML front matter is perhaps the most important aspect of creating sites through Jekyll. It allows you to control how Jekyll processes and builds pages, create page-specific variables, and triggers file processing. Let’s take a closer look at front matter and how it can help you create more efficient Jekyll sites.&lt;/p&gt;

&lt;p&gt;The front matter must be the first item in a file and must take the form of valid YAML set between triple-dashed lines. Here is a basic example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Welcome to Jekyll&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2015-08-15 12:34&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;James Williamson&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example Jekyll is instructed to use the &lt;strong&gt;default.html&lt;/strong&gt; template for the content, and page variables for both the &lt;strong&gt;title&lt;/strong&gt; of the page and the &lt;strong&gt;author&lt;/strong&gt; are created. These can be written to the page using the &lt;code class=&quot;highlighter-rouge&quot;&gt;page.title&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;page.author&lt;/code&gt; objects. A &lt;strong&gt;date&lt;/strong&gt; for the page is given as well, and when used for a Post this will override the date used in the name of the post.&lt;/p&gt;

&lt;p&gt;There are many predefined Global variables that you can set in the front matter of a page or post. These are:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;layout&lt;/dt&gt;
  &lt;dd&gt;Specifies which template to use for the content. As such it must point to a file in the &lt;strong&gt;_layouts&lt;/strong&gt; directory. Do not add the file extension to the template name. To reference the &lt;strong&gt;post.html&lt;/strong&gt; template you would add &lt;code class=&quot;highlighter-rouge&quot;&gt;layout: post&lt;/code&gt;.&lt;/dd&gt;
  &lt;dt&gt;permalink&lt;/dt&gt;
  &lt;dd&gt;Sets the permalink for the targeted file and is used to overwrite the default permalink style for a post. For example, the setting &lt;code class=&quot;highlighter-rouge&quot;&gt;permalink: /blog/:title&lt;/code&gt; would overwrite the site permalink settings and locate the post at &lt;strong&gt;/blog/post-title/index.html&lt;/strong&gt;.&lt;/dd&gt;
  &lt;dt&gt;published&lt;/dt&gt;
  &lt;dd&gt;A boolean value that you can set to &lt;strong&gt;false&lt;/strong&gt; if you don’t want the post published as the site is generated.&lt;/dd&gt;
  &lt;dt&gt;category&lt;/dt&gt;
  &lt;dt&gt;categories&lt;/dt&gt;
  &lt;dd&gt;Assigns a single category or space-separated list of categories to a post. Categories can be used in permalinks and are hierarchical in nature. Allows you to structure posts like &lt;strong&gt;web-design/html/post-title/index.html&lt;/strong&gt;. Posts can also be organized and sorted by categories.&lt;/dd&gt;
  &lt;dt&gt;tags&lt;/dt&gt;
  &lt;dd&gt;Similar to categories, you can apply a single tag or multiples tags in a YAML list or a space-separated string. Although posts can be organized and sorted by tags, they can’t be used for permalinks like categories.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3&gt;Custom variables&lt;/h3&gt;

&lt;p&gt;In addition to the predefined Global Variables, you can create any custom variable you want. That variable can then be accessed by any page or post that uses that content.&lt;/p&gt;

&lt;p&gt;The most common form of custom variable is to store information like page titles, author names, and descriptions that can be added to the page or in &lt;strong&gt;meta&lt;/strong&gt; tags to enhance page metadata. You can take this even further and control things like page layout as well. Let’s say that most pages in your site uses a simple sidebar, but occasionally you need to use a longer sidebar. In your template you could have the following markup:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sidebar&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sidebar-long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;%}
    {% else %}
    {% include sidebar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now in any page or post that uses this template all you would need to add is the following variable to the front matter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sidebar-long: true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Combining includes, templates, and front matter variables gives you an incredible amount of control over how pages are built, and limits the amount of variations you need in the form of templates.&lt;/p&gt;

&lt;p&gt;You can even get to the point where you are generating entire pages with nothing but front matter. Let’s say you want to generate a single page for every tag that lists all posts tagged with that specific tag. You could create a template that generates everything dynamically based on the tag name. To create a new tag page, you simply name the file &lt;strong&gt;tag-name.md&lt;/strong&gt; and add the following to the front matter:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tag-page&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Tagged with Jekyll&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Jekyll&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/tags/:title&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The rest of the file could be empty and Jekyll would dynamically generate the page based on the tag name.&lt;/p&gt;

&lt;h3&gt;SASS and CoffeeScript&lt;/h3&gt;

&lt;p&gt;Jekyll provides built-in support for Sass and CoffeeScript, but won’t process those files automatically. To enable those files for processing, add an empty front matter region to the top of the page:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
---
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The files will then be processed, and the resulting file will be located in the same directory in the generated site. The file &lt;strong&gt;css/layout.scss&lt;/strong&gt; would generate &lt;strong&gt;css/layout.css&lt;/strong&gt; in the finished site.&lt;/p&gt;

</description>
        <pubDate>Thu, 09 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/front-matter</link>
        <guid isPermaLink="true">http://localhost:4000/blog/front-matter</guid>
        
        <category>jekyll</category>
        
        <category>web design</category>
        
        <category>yaml</category>
        
        <category>jekyll for web designers</category>
        
        
      </item>
    
      <item>
        <title>Jekyll: Markdown Basics</title>
        <description>&lt;p&gt;In Jekyll, content for pages and posts can be written in either HTML or Markdown. Although there will be times that HTML is the more appropriate choice, Markdown provides a more natural writing environment that makes blogging easier and less of a chore. In this post we’ll examine how Jekyll uses Markdown and cover some basic Markdown syntax.&lt;/p&gt;

&lt;p&gt;If you’ve never used it before, Markdown is a text-to-HTML converter that let’s you write text naturally in plain text format and then convert it to valid HTML. To learn more about it, read John Gruber’s post introducing Markdown on &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot; title=&quot;Introducing Markdown&quot;&gt;Daring Fireball&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jekyll supports multiple Markdown rendering engines and allows you to specify which engine to use in the site’s configuration. Currently Jekyll supports &lt;a href=&quot;http://kramdown.gettalong.org/index.html&quot; title=&quot;Kramdown&quot;&gt;Kramdown&lt;/a&gt;, &lt;a href=&quot;https://github.com/vmg/redcarpet&quot; title=&quot;Redcarpet&quot;&gt;Redcarpet&lt;/a&gt;, and &lt;a href=&quot;http://dafoster.net/projects/rdiscount/&quot; title=&quot;Rdiscount&quot;&gt;RDiscount&lt;/a&gt;, although you’re free to use any rendering engine you have installed or even write your own!&lt;/p&gt;

&lt;p&gt;To specify a rendering engine, simply add this line to your &lt;strong&gt;_config,yml&lt;/strong&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;markdown: kramdown
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For the most part, the rendering engines are the same, although they do have subtle differences in syntax and element support. Currently Kramdown is the default Markdown renderer for Jekyll. Let’s take a look at some basic Kramdown syntax.&lt;/p&gt;

&lt;p&gt;The following passage:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# My main heading
{: .intro }

This is my initial paragraph. In it I’d like to provide a link to the [Jekyll homepage](http://jekyllrb.com/ &quot;Jekyll&quot;). I want to add **bold** and *italic* formatting to text as well using the `strong` and `emphasis` tags.

This is another paragraph. I’d like to follow it with an unordered list.

* item 1
* item 2
* item 3

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Would be rendered in HTML as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;intro&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;My main heading&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is my initial paragraph. In it I’d like to provide a link to the &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://jekyllrb.com/&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jekyll&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Jekyll homepage&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;. I want to add &lt;span class=&quot;nt&quot;&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;bold&lt;span class=&quot;nt&quot;&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt; and &lt;span class=&quot;nt&quot;&gt;&amp;lt;em&amp;gt;&lt;/span&gt;italic&lt;span class=&quot;nt&quot;&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; formatting to text as well using the &lt;span class=&quot;nt&quot;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;strong&lt;span class=&quot;nt&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; and &lt;span class=&quot;nt&quot;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;emphasis&lt;span class=&quot;nt&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; tags.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is another paragraph. I’d like to follow it with an unordered list.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;item 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;item 2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;item 3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, Markdown frees you from many of the structural restraints that would make it difficult to author something like a blog post using HTML. To write two paragraphs, for example, you simply write two paragraphs, no &amp;lt;p&amp;gt; tags or special formatting required. Let’s take a quick look at how to format some of the basic HTML elements in Kramdown.&lt;/p&gt;

&lt;h3&gt;Paragraphs&lt;/h3&gt;

&lt;p&gt;Consecutive lines of text are formatted as a single paragraph. As a block level element, you must to add a blank line after it to separate it from other block-level elements.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This is a paragraph.

This is as well.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Renders as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is a paragraph.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is as well.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Headings&lt;/h3&gt;

&lt;p&gt;There are multiple ways to format headings in Kramdown. The easiest is to preceed the heading with hash characters (&lt;strong&gt;#&lt;/strong&gt;) equal to the heading level. An &lt;code class=&quot;highlighter-rouge&quot;&gt;h1&lt;/code&gt; for example, would be written as &lt;code class=&quot;highlighter-rouge&quot;&gt;#heading 1&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# This is a heading 1

## This is a heading 2

### This is a heading 3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Renders as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;This is a heading 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;This is a heading 2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;This is a heading 3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Blockquotes&lt;/h3&gt;

&lt;p&gt;Blockquotes are formatted using the “greater than” character (&lt;strong&gt;&amp;gt;&lt;/strong&gt;) at the start of the blockquote. Text inside a blockquote is wrapped with a paragraph.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; This is a blockquote.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Renders as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;blockquote&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is a blockquote.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/blockquote&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Ordered Lists&lt;/h3&gt;

&lt;p&gt;To create an ordered list, simply type a list started by a number followed by a period. Each list item should be on a separate line. Nested lists are created by indenting a list underneath an existing list item.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. This is the first item
2. This is the second item
3. This is the third item
    1. This is a nested list
    2. More nested list
4. This is the fourth item.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Renders as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;This is the first item&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;This is the second item&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;This is the third item
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;This is a nested list&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;More nested list&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;This is the fourth item.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Block-level attributes&lt;/h3&gt;

&lt;p&gt;Often you may wish to assign attributes to block-level elements. To do this, follow the element with a &lt;em&gt;block inline attribute list&lt;/em&gt; (block IAL). A block IAL consists of a left curly brace, followed by a colon, the attribute definitions and a right curly brace.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Apply the class “main” to this heading
{: .main}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Renders as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Apply the class “main” to this heading&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Classes are applied with the syntax &lt;code class=&quot;highlighter-rouge&quot;&gt;.className&lt;/code&gt; and IDs with &lt;code class=&quot;highlighter-rouge&quot;&gt;#ID-name&lt;/code&gt;. For any other attribute you simply write the desired syntax:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Another heading with the ‘role’ attribute applied
{: role=&quot;banner&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Renders as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;banner&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Another heading with the ‘role’ attribute applied
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For multiple attributes, create a space-separated list inside the blockIAL.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# This heading has two classes and one ID applied
{: .class1 .class2 #ID-1}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Renders as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;class1 class2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ID-1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;This heading has two classes and one ID applied&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Inline formatting&lt;/h3&gt;

&lt;p&gt;Emphasis can be added to text by surrounding the text with either asterisks or underscores. This will result in wrapping the content in either the &lt;code class=&quot;highlighter-rouge&quot;&gt;strong&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;emphasis&lt;/code&gt; tag depending upon how many are used:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I want to wrap **this text** in a strong tag and *this text* in an emphasis tag.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Renders as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I want to wrap &lt;span class=&quot;nt&quot;&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;this text&lt;span class=&quot;nt&quot;&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt; in a strong tag and &lt;span class=&quot;nt&quot;&gt;&amp;lt;em&amp;gt;&lt;/span&gt;this text&lt;span class=&quot;nt&quot;&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; in an emphasis tag.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Links&lt;/h3&gt;

&lt;p&gt;You can create a link by surrounding the text with square brackets and then directly following it with the link URL in parentheses. To add a title attribute, add the desired title in straight quotes (“ “) after the link URL.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I usually search using [Google](https://www.google.com &quot;Google&quot;).
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Renders as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I usually search using &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.google.com&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Google&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Google&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Images&lt;/h3&gt;

&lt;p&gt;Images are similar to links, but use an exclamation mark before the square brackets. The link text will become the alternative text of the image and the link URL specifies the image source.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![My dog](/images/Baxter.jpg)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Renders as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/images/Baxter.jpg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;My dog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, Markdown is simple to write, and once you’ve learned the basic formatting options, generating semantic HTML is fairly simple. One of the most powerful Markdown features is the ability to nest HTML directly inside a Markdown document. That way if you’re unable to use Markdown to get exactly the HTML you need, you can simply inject HTML into the document and then continue using Markdown.&lt;/p&gt;

&lt;p&gt;For more information on Kramdown and for a more complete reference, visit Kramdown’s &lt;a href=&quot;http://kramdown.gettalong.org/index.html&quot; title=&quot;Kramdown&quot;&gt;project page&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 29 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/markdown-basics</link>
        <guid isPermaLink="true">http://localhost:4000/blog/markdown-basics</guid>
        
        <category>jekyll</category>
        
        <category>markdown</category>
        
        <category>html</category>
        
        <category>jekyll for web designers</category>
        
        
      </item>
    
  </channel>
</rss>
